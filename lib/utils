#!/usr/bin/env bash

set -euo pipefail

TOOL_NAME="hcloud-upload-image"
REPO_URL="https://github.com/apricote/hcloud-upload-image"

say() {
	printf "[asdf-$TOOL_NAME]: %s\n" "$*"
}

fail() {
	say "$*" >&2
	exit 1
}

sort_semver() {
	sort -t. -k 1,1n -k 2,2n -k 3,3n
}

list_github_semver_tags() {
	git ls-remote --tags --refs "$REPO_URL" \
		| grep -o "refs/tags/v.*" \
		| cut -d/ -f3- \
		| sed "s/^v//" \
		| grep -oE '^[0-9]+\.[0-9]+\.[0-9]+$' \
		| uniq
}

is_valid() {
	url="$1"
	if which curl > /dev/null; then
		curl -s --fail "$url"
	elif which wget > /dev/null; then
		wget -q --spider "$url" &> /dev/null
	else
		fail "Error: Neither curl nor wget is available."
	fi
}

download() {
	out_file="$1"
	url="$2"

	if which curl > /dev/null; then
		curl -fsSL ${GITHUB_API_TOKEN:+-H "Authorization: token $GITHUB_API_TOKEN"} -o "$out_file" "$url"
	elif which wget > /dev/null; then
		wget -q ${GITHUB_API_TOKEN:+--header="Authorization: token $GITHUB_API_TOKEN"} -O "$out_file" "$url"
	else
		fail "Error: Neither curl nor wget is available."
	fi
}

get_arch() {
	platform=$(uname -s)
	arch=$(uname -m)

	case "$platform" in
		Darwin)
			# platform="darwin"
			case "$arch" in
				aarch64 | arm64) arch="arm64" ;;
				x86_64) arch="amd64" ;;
				*) fail "Incompatible darwin architecture." ;;
			esac
			;;
		Linux)
			# platform="linux"
			case "$arch" in
				aarch64 | arm64) arch="arm64" ;;
				# armv7l | armv7) arch="armv7" ;;
				x86_64) ;;
				*) fail "Incompatible linux architecture." ;;
			esac
			;;
		*) fail "Incompatible platform." ;;
	esac

	printf '%s' "${platform}_${arch}"
}
